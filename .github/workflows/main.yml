name: CI/CD

on:
  push:
    branches: [dev, newStuff]
  pull_request:
    branches: [main]

jobs:
  build-job:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: docker/setup-buildx-action@v3
    - uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - run: |
        export DOCKER_USERNAME=${{ vars.DOCKER_USERNAME }}
        docker compose build
        docker compose push

  create-pr-job:
    runs-on: ubuntu-latest
    needs: build-job
    if: github.ref == 'refs/heads/dev'
    steps:
    - name: Create Pull Request
      uses: actions/github-script@v6
      with:
        script: |
          try {
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: 'dev',
              base: 'main'
            });
            
            if (pulls.length === 0) {
              await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'Auto PR: Merge dev to main',
                head: 'dev',
                base: 'main',
                body: 'This PR was automatically created by CI/CD pipeline after successful build.'
              });
              console.log('Pull request created successfully');
            } else {
              console.log('Pull request already exists');
            }
          } catch (error) {
            console.error('Error creating pull request:', error);
          }

  deploy-job:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    - uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: 22
        script: |
          set -e
          DOCKER_USERNAME="${{ vars.DOCKER_USERNAME }}"
          PROJECT_DIR="/opt/devops-project"
 
          apt update && apt install -y git
          systemctl start docker && systemctl enable docker

          mkdir -p $PROJECT_DIR
          cd $PROJECT_DIR

          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u $DOCKER_USERNAME --password-stdin

          if [ -d .git ]; then
            git pull
          else
            git clone https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} .
          fi

          export DOCKER_USERNAME
          docker compose down
          docker compose pull
          docker compose up -d
