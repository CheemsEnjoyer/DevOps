name: CI/CD

on:
  push:
    branches: [main, dev, newStuff]

jobs:
  build-job:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: docker/setup-buildx-action@v3
    - uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - run: |
        export DOCKER_USERNAME=${{ vars.DOCKER_USERNAME }}
        docker compose build
        docker compose push

  merge-job:
    runs-on: ubuntu-latest
    needs: build-job
    if: github.ref == 'refs/heads/dev'
    steps:
    - name: Create Pull Request and Merge
      uses: actions/github-script@v6
      with:
        script: |
          // Create PR from dev to main
          const pr = await github.rest.pulls.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Auto-merge: dev to main',
            head: 'dev',
            base: 'main',
            body: 'Automatically created by CI/CD pipeline'
          });
          
          // Auto-merge the PR
          await github.rest.pulls.merge({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: pr.data.number,
            merge_method: 'merge'
          });

  deploy-job:
    runs-on: ubuntu-latest
    needs: build-job
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    - uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: 22
        script: |
          set -e
          DOCKER_USERNAME="${{ vars.DOCKER_USERNAME }}"
          PROJECT_DIR="/opt/devops-project"
          
          # System setup
          apt update && apt install -y git
          systemctl start docker && systemctl enable docker
          
          # Project directory
          mkdir -p $PROJECT_DIR
          cd $PROJECT_DIR
          
          # Docker login
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u $DOCKER_USERNAME --password-stdin
          
          # Get code
          if [ -d .git ]; then
            git pull
          else
            git clone https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} .
          fi
          
          # Deploy
          export DOCKER_USERNAME
          docker compose down
          docker compose pull
          docker compose up -d
